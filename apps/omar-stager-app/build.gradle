buildscript {
  ext {
    grailsVersion = project.grailsVersion
    baseImage = "omar-ossim-base"
    dockerFile ="docker/Dockerfile"
     dockerStatementsOverride = {
       [
          "FROM ${project.dockerNamespaceUrl}${project.ext.baseImage}:${project.dockerAppTag}",

          "MAINTAINER RadiantBlue Technologies radiantblue.com",
          """ENV SPRING_CLOUD_CONFIG_ENABLED=true \\
                       SPRING_CLOUD_DISCOVERY_ENABLED=true \\
                       HOME=/home/omar""",
          "COPY run.sh /home/omar/run.sh",
          "USER root",
          """RUN yum -y install nss_wrapper gfuse fuse-libs libevent curl &&\
                 yum clean all&& \
                 curl -k -s "https://s3.amazonaws.com/ossimlabs/dependencies/riofs/riofs" -o /usr/bin/riofs && \
                 curl -k -s "https://s3.amazonaws.com/ossimlabs/dependencies/goofys/goofys" -o /usr/bin/goofys && \
                 chmod +x /usr/bin/goofys && \
                 mkdir -p /s3 && chown -R 1001:0 /s3 && chmod 777 /s3 && \
                 chmod ugo+x /usr/bin/riofs && \
                 echo "user_allow_other" > /etc/fuse.conf && \
                 chmod +x /home/omar/run.sh &&\
                 find \$HOME -type d -exec chmod g+x {} +""",
          "COPY ${project.name}-${buildVersion}-${buildVersionTag}.jar \$HOME",
          """RUN chown -R 1001:0 \$HOME""",
          "USER 1001", 
          "WORKDIR \$HOME",
          "expose 8080",
          "CMD \$HOME/run.sh"
       ]
     }
  }
  if(System.env.OMAR_COMMON_PROPERTIES)
  {
    apply from: System.env.OMAR_COMMON_PROPERTIES
  }
  repositories {
    mavenLocal()
    maven { url "${ossimMavenProxy}" }
    maven { url "https://repo.grails.org/grails/core" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.8.2"
    classpath "org.grails.plugins:hibernate5:5.0.10"
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.13.0"
}

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"
apply plugin: "asset-pipeline"

apply plugin: "java"
apply plugin: "maven-publish"

group "io.ossim.omar.apps"

ext {
  grailsVersion = project.grailsVersion
  gradleWrapperVersion = project.gradleWrapperVersion
}

assets {
  minifyJs = true
  minifyCss = true
  includes = ["fonts/*"]
  excludes = ["**/*-debug.js", "**/*-deps.js", "**/*.gz", "**/*.txt", "**/*.less", "**/*.html", "**/i18n/**", "**/",
      ".grunt/**", "**/locale/**", "webjars/jquery/2.1.4/src/intro.js", "webjars/jquery/2.1.4/src/outro.js"]
}

repositories {
  mavenLocal()
  maven { url "${ossimMavenProxy}" }
  maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
  imports {
    mavenBom "org.grails:grails-bom:$grailsVersion"
    mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Brixton.SR7"
  }
  applyMavenExclusions false
}

dependencies {
  if ( System.getenv('O2_DEV_HOME') ) {
    compile project(':omar-stager-plugin')
    runtime project(':omar-raster-plugin')
    compile project(':omar-video-plugin')
    compile project(':omar-opir-plugin')
  } else {
    compile (group: "io.ossim.omar.plugins", name: "omar-stager-plugin", version: "1.1.0-${buildVersionTag}", changing: jarArtifactsChanging)
    runtime (group: "io.ossim.omar.plugins", name: "omar-raster-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-video-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-opir-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
  }



  compile "org.grails.plugins:hibernate5"
  compile "org.hibernate:hibernate-core:5.0.10.Final"
  compile "org.hibernate:hibernate-ehcache:5.0.10.Final"
  compile "org.grails.plugins:quartz-monitor:1.3"

  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.grails:grails-core"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-tomcat"
  compile "org.grails:grails-dependencies:3.1.14"
  compile "org.grails:grails-web-boot"
  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:scaffolding"
  console "org.grails:grails-console"
  compile "org.grails.plugins:grails3-cors-interceptor:1.1.0"
  profile "org.grails.profiles:web"
  runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.8.2"
  runtime "com.h2database:h2"
  testCompile "org.grails:grails-plugin-testing"
  testCompile "org.grails.plugins:geb"
  testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.52.0"
  testRuntime "net.sourceforge.htmlunit:htmlunit:2.23"

  compile "org.springframework.cloud:spring-cloud-starter-config"
  compile "org.springframework.cloud:spring-cloud-starter-eureka"
}

assets {
  minifyJs = true
  minifyCss = true
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}
