//==================================================================================================
// This is the Jenkins pipeline script for building the OMAR avro application.
// Environment varialbes that MUST be passed in by Jenkins:
//    OSSIM_GIT_BRANCH: The tag of the branch to be built. Typically dev or master.
//
// Environment varaibles that MUST be set in the Jenkins global environment (manage jenkins -> configure system -> environment varaibles)
//    ARTIFACTORY_USER: The user to use when pushing artifacts
//    ARTIFACTORY_PASSWORD: The password to use when pushing artifacts
//    OPENSHIFT_USERNAME: The user to use logging into the docker registry
//    OPENSHIFT_PASSWORD: The password to use logging into the docker registry
//==================================================================================================

// TODO: get to run on any node
node(""){
    def workspaceDir = pwd()
    def appName = "omar-stager"
    def omarCommonProjName = "omar-common"
    env.OMAR_COMMON_PROPERTIES="${workspaceDir}/${omarCommonProjName}/omar-common-properties.gradle"
    env.O2_DEV_HOME=pwd()

    stage("Checkout"){
        dir("ossim-ci") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "https://github.com/ossimlabs/ossim-ci.git"
        }
        dir("omar-core") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "https://github.com/ossimlabs/omar-core.git"
        }
        dir("omar-hibernate-spatial") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "https://github.com/ossimlabs/omar-hibernate-spatial.git"
        }
        dir("omar-ingest-metrics") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "https://github.com/ossimlabs/omar-ingest-metrics.git"
        }
        dir("omar-raster") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "https://github.com/ossimlabs/omar-raster.git"
        }
        dir("omar-video") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "https://github.com/ossimlabs/omar-video.git"
        }
        dir("omar-oms") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "https://github.com/ossimlabs/omar-oms.git"
        }
        dir("omar-core") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "https://github.com/ossimlabs/omar-core.git"
        }
        dir("omar-opir") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "https://github.com/ossimlabs/omar-opir.git"
        }
        dir("omar-openlayers") {
            git branch: "${OSSIM_GIT_BRANCH}", url: "https://github.com/ossimlabs/omar-openlayers.git"
        }
        dir(appName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "https://github.com/ossimlabs/${appName}.git"
        }

        dir(omarCommonProjName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "https://github.com/ossimlabs/${omarCommonProjName}.git"
        }

        notifyObj = load "${workspaceDir}/ossim-ci/jenkins/pipeline/notify.groovy"
    }

    try {
      stage ("Publish Artifactory")
      {
          withCredentials([[$class: 'UsernamePasswordMultiBinding', 
                            credentialsId: 'artifactoryCredentials',
                            usernameVariable: 'ARTIFACTORY_USER', 
                            passwordVariable: 'ARTIFACTORY_PASSWORD']])
            {

                    sh """
                    source ${env.HOME}/.bash_profile
                    pushd ${workspaceDir}/${appName}
                    gradle ${appName}-plugin:artifactoryPublish
                    gradle ${appName}-app:artifactoryPublish
                    """
            }
      }
      stage ("Publish Docker App") 
      {      
        withCredentials([[$class: 'UsernamePasswordMultiBinding', 
                        credentialsId: 'dockerCredentials',
                        usernameVariable: 'OPENSHIFT_USERNAME', 
                        passwordVariable: 'OPENSHIFT_PASSWORD']])
        {
            // Run all tasks on the app. This includes pushing to OpenShift and S3.
            sh """
            source ${env.HOME}/.bash_profile
            pushd ${workspaceDir}/${appName}
            gradle :${appName}-app:${GRADLE_TASK}
            popd
            """
        }
      }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
        notifyObj?.notifyFailed()
    }
  stage("Clean Workspace"){
     step([$class: 'WsCleanup'])
  }
}
